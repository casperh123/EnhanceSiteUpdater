@page "/control-panel-settings"

@using System.Security.Claims
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Core.Repository
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using EnhanceSiteUpdaer.Web.Components.Inputs
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>Control Panel Settings</PageTitle>

<h1>Control Panel Details</h1>

<p>On this page you can define settings used to connect to your Enhance Control Panel.</p>

<RadzenStack Orientation="Orientation.Vertical" Style="padding: 20px 0">
    <ErrorMessageInput Name="Control Panel Url" @bind-Text="@_controlPanelUrl" Message="@_ControlPanelUrlErrorMessage"/>
    <ErrorMessageInput Name="Organization Id" @bind-Text="@_organizationId" Message="@_organizationIdErrorMessage"/>
    <HiddenPasswordToggler Name="ApiKey" @bind-Password="@_apiKey" Message="@_apiKeyErrorMessage"/>
</RadzenStack>
<RadzenButton Click="@SaveUserDetails" Text="Save Settings"/>

@code {

    [Inject] 
    public IUserRepository UserRepository { get; set; }

    public ApplicationUser? User;
    
    private string _controlPanelUrl = "https://";
    private string _organizationId = string.Empty;
    private string _apiKey = string.Empty;

    public string _ControlPanelUrlErrorMessage = string.Empty;
    public string _organizationIdErrorMessage = string.Empty;
    public string _apiKeyErrorMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        User = await UserManager.GetUserAsync(claimsPrincipal);

        _controlPanelUrl = User.ControlPanelUrl.ToString();
        _organizationId = User.OrganizationId.ToString();
        _apiKey = User.ApiKey;
    }

    private async Task SaveUserDetails()
    {
        await ValidateControlPanelUrl();
        await ValidateOrganizationId();
        await ValidateApiKey();
        
        await UserRepository.UpdateUser(User);
    }

    private async Task ValidateControlPanelUrl()
    {
        _ControlPanelUrlErrorMessage = string.Empty;
        
        try
        {
            User.ControlPanelUrl = new Uri(_controlPanelUrl);
        }
        catch (UriFormatException e)
        {
            _ControlPanelUrlErrorMessage = e.Message;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ValidateOrganizationId()
    {
        _organizationIdErrorMessage = string.Empty;

        try
        {
            User.OrganizationId = Guid.Parse(_organizationId);
        }
        catch (FormatException e)
        {
            _organizationIdErrorMessage = e.Message;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ValidateApiKey()
    {
        _apiKeyErrorMessage = string.Empty;

        if (string.IsNullOrEmpty(_apiKey))
        {
            _apiKeyErrorMessage = "Api Key is empty";
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            User.ApiKey = _apiKey;
        }
    }
}