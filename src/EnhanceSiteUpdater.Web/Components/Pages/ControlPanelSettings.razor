@page "/control-panel-settings"

@using System.Security.Claims
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Core.Repository
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using EnhanceSiteUpdaer.Web.Components.Notification
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>Control Panel Settings</PageTitle>

<h1>Control Panel Details</h1>

<p>On this page you can define settings used to connect to your Enhance Control Panel.</p>

<AuthorizeView>
        <RadzenStack Orientation="Orientation.Vertical" Style="padding: 20px 0">
            <RadzenFormField Text="Control Panel Url" Variant="Variant.Text">
                <ChildContent>
                    <RadzenTextBox Name="ControlPanelUrl" @bind-Value="@_controlPanelUrl"/>
                </ChildContent>
                <Helper>
                    <ErrorMessage Message="@_panelUrlErrorMessage"/>
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Organization Id" Variant="Variant.Text">
                <ChildContent>
                    <RadzenTextBox @bind-Value="@_organizationId"/>
                </ChildContent>
                <Helper>
                    <ErrorMessage Message="@_organizationIdErrorMessage"/>
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Api Key" Variant="Variant.Text">
                <ChildContent>
                    @if (_apiKeyHidden)
                    {
                        <RadzenPassword Name="ApiKeyPassword" @bind-Value="@_apiKey" Visible="_apiKeyHidden"/>
                    }
                    else
                    {
                        <RadzenTextBox Name="ApiKey" @bind-Value="@_apiKey" Visible="!_apiKeyHidden"/>
                    }
                </ChildContent>
                <End>
                    <RadzenButton Click="@ToggleApiKeyVisibility" Icon="@(_apiKeyHidden ? "visibility" : "visibility_off")"/>
                </End>
                <Helper>
                    <ErrorMessage Message="@_apiKeyErrorMessage"/>
                </Helper>
            </RadzenFormField>
        </RadzenStack>

        
        <RadzenButton Click="@SaveUserDetails" Text="Save Settings"/>
</AuthorizeView>

@code {

    [Inject] 
    public IUserRepository UserRepository { get; set; }

    public ApplicationUser? User;

    private bool _apiKeyHidden = true;

    private string _controlPanelUrl = "https://";
    private string _organizationId = string.Empty;
    private string _apiKey = string.Empty;

    private string _panelUrlErrorMessage = string.Empty;
    private string _organizationIdErrorMessage = string.Empty;
    private string _apiKeyErrorMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        User = await UserManager.GetUserAsync(claimsPrincipal);

        if (SignInManager.IsSignedIn(claimsPrincipal))
        {
            _controlPanelUrl = User.ControlPanelUrl.ToString();
            _organizationId = User.OrganizationId.ToString();
            _apiKey = User.ApiKey;

        }
    }

    private async Task SaveUserDetails()
    {
        ValidateControlPanelUrl();
        ValidateOrganizationId();
        ValidateApiKey();
        
        await UserRepository.UpdateUser(User);
    }

    private void ValidateControlPanelUrl()
    {
        _panelUrlErrorMessage = string.Empty;
        
        try
        {
            User.ControlPanelUrl = new Uri(_controlPanelUrl);
        }
        catch (UriFormatException e)
        {
            _panelUrlErrorMessage = e.Message;
            StateHasChanged();
        }
    }

    private void ValidateOrganizationId()
    {
        _organizationIdErrorMessage = string.Empty;

        try
        {
            User.OrganizationId = Guid.Parse(_organizationId);
        }
        catch (FormatException e)
        {
            _organizationIdErrorMessage = e.Message;
            StateHasChanged();
        }
    }

    private void ValidateApiKey()
    {
        _apiKeyErrorMessage = string.Empty;

        if (string.IsNullOrEmpty(_apiKey))
        {
            _apiKeyErrorMessage = "Api Key is empty";
            StateHasChanged();
        }
        else
        {
            User.ApiKey = _apiKey;
        }
    }

    private void ToggleApiKeyVisibility()
    {
        _apiKeyHidden = !_apiKeyHidden;
    }
}