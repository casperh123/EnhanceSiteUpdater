@page "/enhance-maintenance"
@using Enhance.Client
@using Enhance.Client.Models
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Infrastructure.ClientBuilder
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Kiota.Abstractions
@using Microsoft.Kiota.Abstractions.Authentication
@using Microsoft.Kiota.Http.HttpClientLibrary
@using Microsoft.Kiota.Http.HttpClientLibrary.Middleware.Options
@using EnhanceSiteUpdaer.Web.Components.Cards
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory


@attribute [Authorize]

<h2>Websites</h2>

<RadzenStack Gap="10px" Orientation="Orientation.Vertical">
    @foreach (Website website in websites)
    {
        <EnhanceWebsiteCard EnhanceWebsite="@website"/>
    }
</RadzenStack>

@code {

    private ApplicationUser _user;
    private List<Website> websites = [];
    private EnhanceClient _client;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authenticationState.User);

        HttpClient httpClient = HttpClientFactory.CreateClient("client");
        
        _client = EnhanceClientBuilder.Build(_user.ControlPanelUrl, _user.BearerApiKey, httpClient);
        
       WebsitesListing websites = await _client.Orgs[_user.OrganizationId.Value].Websites.GetAsync();
       
       this.websites = websites.Items;
       
       Console.Write(websites);
    }
}