@page "/enhance-maintenance"
@using EnhanceSiteUpdater.Core.Entities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using EnhanceSiteUpdaer.Web.Components.Cards
@using EnhanceSiteUpdaer.Web.Components.SiteSelectors
@using EnhanceSiteUpdater.Core.Repository
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebsiteRepository WebsiteRepository

@attribute [Authorize]

<h1>Enhance Website Maintenance Panel</h1>

<h2>Add Websites</h2>
@if (_websites.Count is 0 || _addWebsites)
{
    <RadzenButton Click="@AddWebsites">Close</RadzenButton>
    <EnhanceSiteSelector User="@_user" Websites="_websites" WebsiteChanged="@WebsiteChanged"/>
}
else
{
    <RadzenButton Click="@AddWebsites">Add Websites</RadzenButton>
}

<h2>Websites</h2>

<RadzenStack Gap="10px" Orientation="Orientation.Vertical">
    @foreach (UpdaterWebsite website in _websites)
    {
        <UpdaterWebsiteCard Website="@website" WebsiteChanged="@WebsiteChanged"/>
    }
</RadzenStack>

@code {
    private ApplicationUser _user { get; set; }
    private List<UpdaterWebsite> _websites = [];

    private bool _addWebsites { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authenticationState.User);

        _websites = await WebsiteRepository.GetAllAsync();
    }

    private void AddWebsites()
    {
        _addWebsites = !_addWebsites;
    }

    private async Task WebsiteChanged(UpdaterWebsite website)
    {
        if (website.MaintenanceType is MaintenanceType.None)
        {
            await WebsiteRepository.Delete(website);
            _websites.Remove(website);
        }
        else
        {
            await WebsiteRepository.AddOrUpdate(website);

            if (!_websites.Contains(website))
            {
                _websites.Add(website);
            }
        }
    }
}