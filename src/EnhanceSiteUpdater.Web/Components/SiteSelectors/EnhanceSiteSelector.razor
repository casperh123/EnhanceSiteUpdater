@using Enhance.Client
@using Enhance.Client.Models
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Infrastructure.ClientBuilder
@using Microsoft.AspNetCore.Authorization
@using EnhanceSiteUpdater.Web.Components.Cards
@using EnhanceSiteUpdater.Core.Repository
@using EnhanceSiteUpdater.Infrastructure.EntityHelpers
@inject IHttpClientFactory HttpClientFactory

@attribute [Authorize]

<RadzenStack Gap="10px" Orientation="Orientation.Vertical">
    @if (!_newWebsites.Any())
    {
        <p>No websites found.</p>
    }
    @foreach (UpdaterWebsite website in _newWebsites)
    {
        <UpdaterWebsiteCard Website="@website" WebsiteChanged="@WebsiteAdded"/>
    }
</RadzenStack>

@code {
    [Parameter] public ApplicationUser User { get; set; }

    [Parameter] public List<UpdaterWebsite> Websites { get; set; }

    [Parameter] public EventCallback<UpdaterWebsite> WebsiteChanged { get; set; }

    private List<UpdaterWebsite> _newWebsites = [];
    private EnhanceClient _client;

    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient("client");

        _client = EnhanceClientBuilder.Build(User.ControlPanelUrl, User.BearerApiKey, httpClient);

        WebsitesListing websites = await _client.Orgs[User.OrganizationId.Value].Websites.GetAsync(website => website.QueryParameters.RecursionAsRecursion = Recursion.Infinite);

        _newWebsites = websites?.Items?.ConvertAll(EnhanceToCore.EnhanceWebsite).Where(website => !Websites.Contains(website)).ToList() ?? [];

    }

    public async Task WebsiteAdded(UpdaterWebsite website)
    {
        await WebsiteChanged.InvokeAsync(website);
    }

}