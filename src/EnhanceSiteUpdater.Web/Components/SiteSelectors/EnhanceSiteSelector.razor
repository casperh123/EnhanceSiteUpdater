@using Enhance.Client
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Infrastructure.Services
@using Microsoft.AspNetCore.Authorization
@using EnhanceSiteUpdater.Web.Components.Cards
@inject IEnhanceService EnhanceService

@attribute [Authorize]

<RadzenStack Gap="10px" Orientation="Orientation.Vertical">
    @if (!_enhanceWebsites.Any())
    {
        <p>No websites found.</p>
    }
    @foreach (UpdaterWebsite website in _enhanceWebsites.Where(website => !ExistingWebsites.Contains(website))
        .ToList())
    {
        <UpdaterWebsiteCard Website="@website" WebsiteChanged="@WebsiteAdded"/>
    }
</RadzenStack>

@code {
    [Parameter] 
    public ApplicationUser User { get; set; }

    [Parameter] 
    public List<UpdaterWebsite> ExistingWebsites { get; set; }

    [Parameter] 
    public EventCallback<UpdaterWebsite> WebsiteChanged { get; set; }

    private List<UpdaterWebsite> _enhanceWebsites = [];
    private EnhanceClient _client;

    protected override async Task OnInitializedAsync()
    {
        _enhanceWebsites = await EnhanceService.GetWebsites(User);
    }

    public async Task WebsiteAdded(UpdaterWebsite website)
    {
        await WebsiteChanged.InvokeAsync(website);

        if (website.MaintenanceType is MaintenanceType.None)
        {
            _enhanceWebsites.Add(website);
        }
        else
        {
            _enhanceWebsites.Remove(website);
        }
    }

}