@using Enhance.Client.Models
@using EnhanceSiteUpdaer.Web.Components.Badge
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Core.Repository
@using EnhanceSiteUpdater.Infrastructure.EntityHelpers
@inject IWebsiteRepository WebsiteRepository

<RadzenCard >
    <RadzenRow Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H4">
                @Website.Domain
            </RadzenText>
            <UpdaterWebsiteBadge WebsiteKind="@Website.Kind"/>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenText>
                Added:
            </RadzenText>
            @if (Website.MaintenanceType != MaintenanceType.None)
            {
                <RadzenIcon Icon="done" IconColor="@Colors.Success" />
            }
            else
            {
                <RadzenIcon Icon="dangerous" IconColor="@Colors.Danger" />
            }
        </RadzenColumn>
        
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Body1">
                Maintenance Plan:
            </RadzenText>
            <RadzenDropDown @bind-Value="@Website.MaintenanceType" Data="_maintenanceTypes" Change="@MaintenanceChanged"></RadzenDropDown>
        </RadzenStack>
    </RadzenRow>
</RadzenCard>

@code {
    [Parameter]
    public UpdaterWebsite Website { get; set; }
    private List<MaintenanceType> _maintenanceTypes = Enum.GetValues<MaintenanceType>().ToList();
    
    private async Task MaintenanceChanged()
    {
        if (Website.MaintenanceType is MaintenanceType.None)
        {
            await WebsiteRepository.Delete(Website);
        }
        else
        {
            await WebsiteRepository.AddOrUpdate(Website);
        }
        
    }
}