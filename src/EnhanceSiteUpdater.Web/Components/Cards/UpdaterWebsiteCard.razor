@using EnhanceSiteUpdater.Web.Components.Badge
@using EnhanceSiteUpdater.Core.Entities
@using EnhanceSiteUpdater.Core.Repository
@inject IWebsiteRepository WebsiteRepository

<RadzenCard >
    <RadzenRow Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H4">
                @Website.Domain
            </RadzenText>
            <UpdaterWebsiteBadge WebsiteKind="@Website.Kind"/>
        </RadzenColumn>
        @if (Website.MaintenanceType is MaintenanceType.None)
        {
            <RadzenColumn>
                Added:
                <RadzenIcon Icon="dangerous" IconColor="@Colors.Danger" />
            </RadzenColumn>   
        }
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Body1">
                Maintenance Plan:
            </RadzenText>
            <RadzenDropDown TValue="MaintenanceType"
                            Value="@Website.MaintenanceType"
                            ValueChanged="MaintenanceChanged"
                            Data="_maintenanceTypes">
            </RadzenDropDown>
        </RadzenStack>
    </RadzenRow>
</RadzenCard>

@code {
    [Parameter]
    public UpdaterWebsite Website { get; set; }
    
    [Parameter]
    public EventCallback<UpdaterWebsite> WebsiteChanged { get; set; }
    
    private List<MaintenanceType> _maintenanceTypes = Enum.GetValues<MaintenanceType>().ToList();
    
    public async Task MaintenanceChanged(MaintenanceType newValue)
    {
        Website.MaintenanceType = newValue;
        await WebsiteChanged.InvokeAsync(Website);    }
}