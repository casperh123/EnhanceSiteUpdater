@using Microsoft.EntityFrameworkCore
@using WebsiteMaintainer.Web.Components.Badge
@using WebsiteMaintainer.Core.Entities
@using WebsiteMaintainer.Infrastructure.Services
@using WebsiteMaintainer.Web.Services
@inject IEnhanceService EnhanceService;
@inject IUserService UserService;
<RadzenCard>
    <RadzenRow Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenColumn>
            <RadzenText TextStyle="TextStyle.H4">
                @Website.Domain
            </RadzenText>
            <UpdaterWebsiteBadge WebsiteKind="@Website.Kind"/>
        </RadzenColumn>
        <RadzenStack JustifyContent="JustifyContent.Start">
            <RadzenText TextStyle="TextStyle.Subtitle1">
                Plugin Data:
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                Total Plugins: @TotalPlugins <br/>
                Outdated: @UpdateablePlugins
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2"></RadzenText>
        </RadzenStack>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Body2">
                Maintenance Plan:
            </RadzenText>
            <RadzenDropDown TValue="MaintenanceType"
                            Value="@Website.MaintenanceType"
                            ValueChanged="MaintenanceChanged"
                            Data="@Website.AddedMaintenanceTypes">
            </RadzenDropDown>
        </RadzenStack>
        <RadzenStack>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@RemoveWebsite" Icon="close" />
        </RadzenStack>
    </RadzenRow>
</RadzenCard>

@code {
    
    [Parameter]
    public Website Website { get; set; }
    
    [Parameter]
    public EventCallback<Website> WebsiteChanged { get; set; }

    private List<Plugin> Plugins { get; set; }
    private int TotalPlugins { set; get; }
    private int UpdateablePlugins { get; set; }
    private bool PluginDetailsOpen { get; set; }git 

    protected override async void OnInitialized()
    {
        ApplicationUser user = await UserService.GetCurrentUserAsync();
        Plugins = await EnhanceService.GetPlugins(user, Website);

        UpdateablePlugins = Plugins.Count(plugin => plugin.UpdateAvailable);
        TotalPlugins = Plugins.Count;
    }

    public async Task MaintenanceChanged(MaintenanceType newValue)
    {
        Website.MaintenanceType = newValue;
        await WebsiteChanged.InvokeAsync(Website);
    }

    private async Task RemoveWebsite()
    {
        Website.MaintenanceType = MaintenanceType.None;
        await WebsiteChanged.InvokeAsync(Website);
    }
}